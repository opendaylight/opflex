How to Build Policy Agent
=========================================
The policy agent is supported on the following distributions:
  * Centos 6.5

The policy agent is confirmed to build, but not supported, on the following
distributions:
  * Fedora 20
  * Ubuntu 13.04
  * Ubuntu 13.10

Initial Setup of The Development Environment
============================================
Once you have a VM created and the git cloned, one should execute the
~/BUILD/vmbuildup.sh script. This is intended to setup your system with
the necessary tools and libraries that are required to develop on the 
policy agent code. This will install the necessary libraries and test
harness(s). The script will prompt you for you sudo passwd, which is assumed
you are in the sudo list on the enviroment that you are developing on. All
the necessary version of the various tools is installed. Once completed 
you can execute the ./BUILD/autorun.sh as shown below.

Building on CentOS 6.5
======================
You need to upgrade autoconf to version 2.69 since CentOS 6.5 ships with an
older version of autoconf. To do this, follow these instructions:
  * Download autoconf-2.69:
    * http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz
  * Build and install autoconf-2.69:
    * tar xvzf autoconf-2.69.tar.gz
    * cd autoconf-2.69
    * ./configure
    * make
    * sudo make install

Initial to setup the environment, which uses the autoconf, automake, and libtool,
you have build the Makefiles. The automake and autoconf tools can be used to 
manage C projects under Unix. They should save a lot of time compared to 
writing Makefiles and configure scripts manually, while ensuring that your 
project is structured according to GNU standards.

Once the code is download use must execute the following from the root build
directory:

    prompt> ./BUILD/autorun.sh

After this point to make the system one should simply execute the make command
from the root directory to ensure it catches all changes. If new files are 
created you must add them to that directory's Makefile.am and re-execute
the ./BUILD/autorun.sh in order to create the Makefile with your new files.

Debugging an Excutable
======================
Given the state of initial development it will inevitable that you will have to
used your debugging skills and gdb will most like be your tool of choice. To
execute the gdb in a libtool environment were everything is shared libs and 
dynamically linked, it may be a little confusing how to get to an executable
to gdb on. The following is used to gdb pagentd for example:

    prompt> cd pagentd
    prompt> libtool --mode=execute gdb pagentd

This will properly set the librarypath and run the debugger. Fortunately, we 
can forget about the .libs directory, and just run it on the executable
wrapper.

Installing an Excutable
=======================
If you used libtool to link any executables against uninstalled libtool
libraries, you need to use libtool to install the executables after the
libraries have been installed. On shared library systems that require
wrapper scripts, libtool just ignores the wrapper script and installs
the correct binary:

     prompt> libtool --mode=install -c pagentd /usr/local/bin/pagentd
     install -c .libs/pagentd /usr/local/bin/pagentd
     prompt>

