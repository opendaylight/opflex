/**
 * 
 * SOME COPYRIGHT
 * 
 * Universe.hpp
 * 
 * generated Universe.hpp file genie code generation framework free of license.
 *  
 */
#pragma once
#ifndef GI_RELATOR_UNIVERSE_HPP
#define GI_RELATOR_UNIVERSE_HPP

#include <boost/optional.hpp>
#include "opflex/modb/URIBuilder.h"
#include "opflex/modb/mo-internal/MO.h"
/*
 * contains: item:mclass(epdr/EndPointToGroupRRes)
 */
#include "opmodelgbp/epdr/EndPointToGroupRRes.hpp"
/*
 * contains: item:mclass(gbp/EpGroupToNetworkRRes)
 */
#include "opmodelgbp/gbp/EpGroupToNetworkRRes.hpp"
/*
 * contains: item:mclass(gbp/RuleToClassifierRRes)
 */
#include "opmodelgbp/gbp/RuleToClassifierRRes.hpp"
/*
 * contains: item:mclass(gbp/EpGroupToProvContractRRes)
 */
#include "opmodelgbp/gbp/EpGroupToProvContractRRes.hpp"
/*
 * contains: item:mclass(gbp/EpGroupToConsContractRRes)
 */
#include "opmodelgbp/gbp/EpGroupToConsContractRRes.hpp"
/*
 * contains: item:mclass(gbp/BridgeDomainToNetworkRRes)
 */
#include "opmodelgbp/gbp/BridgeDomainToNetworkRRes.hpp"
/*
 * contains: item:mclass(gbp/FloodDomainToNetworkRRes)
 */
#include "opmodelgbp/gbp/FloodDomainToNetworkRRes.hpp"
/*
 * contains: item:mclass(gbp/SubnetsToNetworkRRes)
 */
#include "opmodelgbp/gbp/SubnetsToNetworkRRes.hpp"

namespace opmodelgbp {
namespace relator {

class Universe
    : public opflex::modb::mointernal::MO
{
public:

    /**
     * The unique class ID for Universe
     */
    static const opflex::modb::class_id_t CLASS_ID = 7;

    /**
     * Retrieve an instance of Universe from the managed
     * object store.  If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @param framework the framework instance to use
     * @param uri the URI of the object to retrieve
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    static boost::optional<boost::shared_ptr<opmodelgbp::relator::Universe> > resolve(
        opflex::ofcore::OFFramework& framework,
        const opflex::modb::URI& uri)
    {
        return opflex::modb::mointernal::MO::resolve<opmodelgbp::relator::Universe>(framework, CLASS_ID, uri);
    }

    /**
     * Retrieve an instance of Universe from the managed
     * object store using the default framework instance.  If the 
     * object does not exist in the local store, returns boost::none. 
     * Note that even though it may not exist locally, it may still 
     * exist remotely.
     * 
     * @param uri the URI of the object to retrieve
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    static boost::optional<boost::shared_ptr<opmodelgbp::relator::Universe> > resolve(
        const opflex::modb::URI& uri)
    {
        return opflex::modb::mointernal::MO::resolve<opmodelgbp::relator::Universe>(opflex::ofcore::OFFramework::defaultInstance(), CLASS_ID, uri);
    }

    /**
     * Retrieve an instance of Universe from the managed
     * object store by constructing its URI from the path elements
     * that lead to it.  If the object does not exist in the local
     * store, returns boost::none.  Note that even though it may not
     * exist locally, it may still exist remotely.
     * 
     * The object URI generated by this function will take the form:
     * /RelatorUniverse
     * 
     * @param framework the framework instance to use 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    static boost::optional<boost::shared_ptr<opmodelgbp::relator::Universe> > resolve(
        opflex::ofcore::OFFramework& framework)
    {
        return resolve(framework,opflex::modb::URIBuilder().addElement("RelatorUniverse").build());
    }

    /**
     * Retrieve an instance of Universe from the 
     * default managed object store by constructing its URI from the
     * path elements that lead to it.  If the object does not exist in
     * the local store, returns boost::none.  Note that even though it
     * may not exist locally, it may still exist remotely.
     * 
     * The object URI generated by this function will take the form:
     * /RelatorUniverse
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    static boost::optional<boost::shared_ptr<opmodelgbp::relator::Universe> > resolve(
        )
    {
        return resolve(opflex::ofcore::OFFramework::defaultInstance());
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::epdr::EndPointToGroupRRes> > resolveEpdrEndPointToGroupRRes(
        )
    {
        return opmodelgbp::epdr::EndPointToGroupRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("EpdrEndPointToGroupRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::epdr::EndPointToGroupRRes> addEpdrEndPointToGroupRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::epdr::EndPointToGroupRRes> result = addChild<opmodelgbp::epdr::EndPointToGroupRRes>(
            CLASS_ID, getURI(), 2147713051ul, 27,
            opflex::modb::URIBuilder(getURI()).addElement("EpdrEndPointToGroupRRes").build()
            );
        return result;
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::gbp::EpGroupToNetworkRRes> > resolveGbpEpGroupToNetworkRRes(
        )
    {
        return opmodelgbp::gbp::EpGroupToNetworkRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("GbpEpGroupToNetworkRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::gbp::EpGroupToNetworkRRes> addGbpEpGroupToNetworkRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::gbp::EpGroupToNetworkRRes> result = addChild<opmodelgbp::gbp::EpGroupToNetworkRRes>(
            CLASS_ID, getURI(), 2147713057ul, 33,
            opflex::modb::URIBuilder(getURI()).addElement("GbpEpGroupToNetworkRRes").build()
            );
        return result;
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::gbp::RuleToClassifierRRes> > resolveGbpRuleToClassifierRRes(
        )
    {
        return opmodelgbp::gbp::RuleToClassifierRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("GbpRuleToClassifierRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::gbp::RuleToClassifierRRes> addGbpRuleToClassifierRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::gbp::RuleToClassifierRRes> result = addChild<opmodelgbp::gbp::RuleToClassifierRRes>(
            CLASS_ID, getURI(), 2147713060ul, 36,
            opflex::modb::URIBuilder(getURI()).addElement("GbpRuleToClassifierRRes").build()
            );
        return result;
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::gbp::EpGroupToProvContractRRes> > resolveGbpEpGroupToProvContractRRes(
        )
    {
        return opmodelgbp::gbp::EpGroupToProvContractRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("GbpEpGroupToProvContractRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::gbp::EpGroupToProvContractRRes> addGbpEpGroupToProvContractRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::gbp::EpGroupToProvContractRRes> result = addChild<opmodelgbp::gbp::EpGroupToProvContractRRes>(
            CLASS_ID, getURI(), 2147713065ul, 41,
            opflex::modb::URIBuilder(getURI()).addElement("GbpEpGroupToProvContractRRes").build()
            );
        return result;
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::gbp::EpGroupToConsContractRRes> > resolveGbpEpGroupToConsContractRRes(
        )
    {
        return opmodelgbp::gbp::EpGroupToConsContractRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("GbpEpGroupToConsContractRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::gbp::EpGroupToConsContractRRes> addGbpEpGroupToConsContractRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::gbp::EpGroupToConsContractRRes> result = addChild<opmodelgbp::gbp::EpGroupToConsContractRRes>(
            CLASS_ID, getURI(), 2147713074ul, 50,
            opflex::modb::URIBuilder(getURI()).addElement("GbpEpGroupToConsContractRRes").build()
            );
        return result;
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::gbp::BridgeDomainToNetworkRRes> > resolveGbpBridgeDomainToNetworkRRes(
        )
    {
        return opmodelgbp::gbp::BridgeDomainToNetworkRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("GbpBridgeDomainToNetworkRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::gbp::BridgeDomainToNetworkRRes> addGbpBridgeDomainToNetworkRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::gbp::BridgeDomainToNetworkRRes> result = addChild<opmodelgbp::gbp::BridgeDomainToNetworkRRes>(
            CLASS_ID, getURI(), 2147713076ul, 52,
            opflex::modb::URIBuilder(getURI()).addElement("GbpBridgeDomainToNetworkRRes").build()
            );
        return result;
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::gbp::FloodDomainToNetworkRRes> > resolveGbpFloodDomainToNetworkRRes(
        )
    {
        return opmodelgbp::gbp::FloodDomainToNetworkRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("GbpFloodDomainToNetworkRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::gbp::FloodDomainToNetworkRRes> addGbpFloodDomainToNetworkRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::gbp::FloodDomainToNetworkRRes> result = addChild<opmodelgbp::gbp::FloodDomainToNetworkRRes>(
            CLASS_ID, getURI(), 2147713086ul, 62,
            opflex::modb::URIBuilder(getURI()).addElement("GbpFloodDomainToNetworkRRes").build()
            );
        return result;
    }

    /**
     * Retrieve the child object with the specified naming
     * properties. If the object does not exist in the local store,
     * returns boost::none.  Note that even though it may not exist
     * locally, it may still exist remotely.
     * 
     * @return a shared pointer to the object or boost::none if it
     * does not exist.
     */
    boost::optional<boost::shared_ptr<opmodelgbp::gbp::SubnetsToNetworkRRes> > resolveGbpSubnetsToNetworkRRes(
        )
    {
        return opmodelgbp::gbp::SubnetsToNetworkRRes::resolve(getFramework(), opflex::modb::URIBuilder(getURI()).addElement("GbpSubnetsToNetworkRRes").build());
    }

    /**
     * Create a new child object with the specified naming properties
     * and make it a child of this object in the currently-active
     * mutator.  If the object already exists in the store, get a
     * mutable copy of that object.  If the object already exists in
     * the mutator, get a reference to the object.
     * 
     * @throws std::logic_error if no mutator is active
     * @return a shared pointer to the (possibly new) object
     */
    boost::shared_ptr<opmodelgbp::gbp::SubnetsToNetworkRRes> addGbpSubnetsToNetworkRRes(
        )
    {
        boost::shared_ptr<opmodelgbp::gbp::SubnetsToNetworkRRes> result = addChild<opmodelgbp::gbp::SubnetsToNetworkRRes>(
            CLASS_ID, getURI(), 2147713094ul, 70,
            opflex::modb::URIBuilder(getURI()).addElement("GbpSubnetsToNetworkRRes").build()
            );
        return result;
    }

    /**
     * Remove this instance using the currently-active mutator.  If
     * the object does not exist, then this will be a no-op.  If this
     * object has any children, they will be garbage-collected at some
     * future time.
     * 
     * @throws std::logic_error if no mutator is active
     */
    void remove()
    {
        getTLMutator().remove(CLASS_ID, getURI());
    }

    /**
     * Remove the Universe object with the specified URI
     * using the currently-active mutator.  If the object does not exist,
     * then this will be a no-op.  If this object has any children, they
     * will be garbage-collected at some future time.
     * 
     * @param framework the framework instance to use
     * @param uri the URI of the object to remove
     * @throws std::logic_error if no mutator is active
     */
    static void remove(opflex::ofcore::OFFramework& framework,
                       const opflex::modb::URI& uri)
    {
        MO::remove(framework, CLASS_ID, uri);
    }

    /**
     * Remove the Universe object with the specified URI 
     * using the currently-active mutator and the default framework 
     * instance.  If the object does not exist, then this will be a
     * no-op.  If this object has any children, they will be 
     * garbage-collected at some future time.
     * 
     * @param uri the URI of the object to remove
     * @throws std::logic_error if no mutator is active
     */
    static void remove(const opflex::modb::URI& uri)
    {
        remove(opflex::ofcore::OFFramework::defaultInstance(), uri);
    }

    /**
     * Register a listener that will get called for changes related to
     * this class.  This listener will be called for any modifications
     * of this class or any transitive children of this class.
     * 
     * @param framework the framework instance 
     * @param listener the listener functional object that should be
     * called when changes occur related to the class.  This memory is
     * owned by the caller and should be freed only after it has been
     * unregistered.
     */
    static void registerListener(
        opflex::ofcore::OFFramework& framework,
        opflex::modb::ObjectListener* listener)
    {
        opflex::modb::mointernal
            ::MO::registerListener(framework, listener, CLASS_ID);
    }

    /**
     * Register a listener that will get called for changes related to
     * this class with the default framework instance.  This listener
     * will be called for any modifications of this class or any
     * transitive children of this class.
     * 
     * @param listener the listener functional object that should be
     * called when changes occur related to the class.  This memory is
     * owned by the caller and should be freed only after it has been
     * unregistered.
     */
    static void registerListener(
        opflex::modb::ObjectListener* listener)
    {
        registerListener(opflex::ofcore::OFFramework::defaultInstance(), listener);
    }

    /**
     * Unregister a listener from updates to this class.
     * 
     * @param framework the framework instance 
     * @param listener The listener to unregister.
     */
    static void unregisterListener(
        opflex::ofcore::OFFramework& framework,
        opflex::modb::ObjectListener* listener)
    {
        opflex::modb::mointernal
            ::MO::unregisterListener(framework, listener, CLASS_ID);
    }

    /**
     * Unregister a listener from updates to this class from the
     * default framework instance
     * 
     * @param listener The listener to unregister.
     */
    static void unregisterListener(
        opflex::modb::ObjectListener* listener)
    {
        unregisterListener(opflex::ofcore::OFFramework::defaultInstance(), listener);
    }

    /**
     * Construct an instance of Universe.
     * This should not typically be called from user code.
     */
    Universe(
        opflex::ofcore::OFFramework& framework,
        const opflex::modb::URI& uri,
        const boost::shared_ptr<const opflex::modb::mointernal::ObjectInstance>& oi)
        : MO(framework, CLASS_ID, uri, oi) { }
}; // class Universe

} // namespace relator
} // namespace opmodelgbp
#endif // GI_RELATOR_UNIVERSE_HPP
