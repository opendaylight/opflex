module[policy]
{
    # definition of the policy container. a policy container is a named policy resolution container
    # in which policy definitions are contained.
    class[Container;
          abstract;
          ]

    # named policy container
    class[NamedContainer;
          super=policy/Container;
          abstract;
          ]
    {
        member[name; type=policy/Name]
    }

    # name resolved policy container. this policy container is resolvable by name in the hierarchy,
    # the same way as policy definitions.
    class[NamedResolvedContainer;
              super=policy/NamedContainer;
              abstract;
              ]

    # an object representing policy universe. this object always exists and contains all of
    # the policies within the existence.
    class[Universe;
          super=policy/Container;
          concrete
          ]
    {
        # policy:Universe is a root node
        root

        # always named as "universe"
        named
        {
            parent[class=*]
            {
                component[prefix=universe]
            }
        }
    }

    # Policy space is a named policy resolution space that is part of the universe. In some ways, it can be thought of
    # as tenant-like construct or a private space in which policies are held and resolved.
    class[Space;
          super=policy/NamedResolvedContainer;
          concrete
          ]
    {
        contained
        {
            parent[class=policy/Universe]
            {
                name-component[prefix=space; member=name]
            }
        }
    }
}