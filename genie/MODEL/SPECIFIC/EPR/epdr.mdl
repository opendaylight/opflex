module[epdr]
{
    type[name=RouteSource; super=reference/URI]
    # abstraction of locally discovered endpoint
    class[EndPoint;
          super=epr/LocalNetworkEp;
          abstract
          ]
    {
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
            }
        }

        dependency[group;
                   cardinality=single;
                   ]
        {
            to[class=gbp/EpGroup;
                cardinality=many;
                ]
        }

        dependency[secGroup;
                   cardinality=many;
                   ]
        {
            to[class=gbp/SecGroup;
                cardinality=many;
                ]
        }
    }

    # abstraction of local L2 end-point identifies an end-point that is locally discovered.
    class[LocalL2Ep;
          super=epdr/EndPoint;
          concrete;
          ]
    {
        contained
        {
            parent[class=epdr/L2Discovered]
        }
    }

    # abstraction of local L3 end-point identifies an end-point that is locally discovered.
    class[LocalL3Ep;
          super=epdr/EndPoint;
          concrete;
          ]
    {
        # ip address of the end-point
        member[ip; type=address/IP]

        contained
        {
            parent[class=epdr/L3Discovered]
        }

    }

    # abstraction of external end-point identifies the external peer
    class[ExternalL3Ep;
          super=epr/LocalEp;
          concrete;
          ]
    {
        # A unique identifer for the endpoint.  Could be related to a
        # UUID for an interface, virtual machine, etc.
        member[uuid; type=reference/UUID]

        # ip address of the external endpoint
        member[ip; type=address/IP]

        # mac address of the external endpoint
        member[mac; type=address/MAC]

        named
        {
            parent[class=*;]
            {
                component[member=uuid]
            }
        }

        dependency[pathAtt;
                   cardinality=single;
                   ]
        {
            to[class=gbp/ExternalInterface;
                cardinality=single;
                ]
        }

        dependency[nodeAtt;
                   cardinality=single;
                   ]
        {
            to[class=gbp/ExternalNode;
                cardinality=single;
                ]
        }

        dependency[secGroup;
                   cardinality=many;
                   ]
        {
            to[class=gbp/SecGroup;
                cardinality=many;
                ]
        }

        contained
        {
            parent[class=epdr/ExternalDiscovered]
        }

    }

    class[DynamicNextHop;
          super=gbp/BaseNextHop;
          concrete]
    {
        contained
        {
            parent[class=epdr/DynamicRoute]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[DynamicRoute;
          super=gbp/BaseRoute;
          concrete]
    {
        member[uuid; type=reference/UUID]

        member[asn; type=scalar/UInt32]

        member[cost; type=scalar/UInt32]

        dependency[vrf;
                   cardinality=single;
                   ]
        {
            to[class=gbp/RoutingDomain;
               cardinality=many;
               ]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
            }
        }
        contained
        {
            parent[class=epdr/PeerRouteDiscovered]
        }
    }

    class[LocalRoute;
          super=gbp/BaseRoute;
          concrete]
    {
        member[vrf; type=gbpe/EncapId]
        named
        {
            parent[class=*;]
            {
                component[prefix="localrt-";
                          member=vrf;
                          prefix="-";
                          member=address;
                          prefix="/";
                          member=prefixLen]
            }
        }
        contained
        {
            parent[class=epdr/LocalRouteDiscovered]
        }
    }

    class[LocalRouteSource;
          concrete]
    {
        member[source; type=epdr/RouteSource]
        named
        {
            parent[class=*;]
            {
                component[member=source]
            }
        }
        contained
        {
            parent[class=epdr/LocalRoute]
        }
    }

    class[LocalNextHop;
          super=gbp/BaseNextHop;
          concrete]
    {
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
        contained
        {
            parent[class=epdr/LocalRoute]
        }
    }
}
