module[gbp]
{
    type[ConnTrack; super=scalar/Enum8]
    {
        # Match on traffic matching the classifier strictly
        const[name=normal; value=0]

        # Additionally match reverse traffic for connections
        const[name=reflexive; value=1]
    }

    class[Classifier;
          super=gbp/AccessBehavioralGroup;
          abstract]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=classifier;
                          member=name]
            }
        }

        member[order; type=scalar/UInt32]
        member[connectionTracking; type=gbp/ConnTrack]
    }

}
