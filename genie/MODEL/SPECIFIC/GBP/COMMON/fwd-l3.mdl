module[gbp]
{
    class[L3BehavioralGroup;
          super=gbp/ForwardingBehavioralGroup;
          abstract]

    type[Autoconfig; super=scalar/Enum8]
    {
        # Stateless autoconfiguration
        const[name=stateless; value=0]

        # DHCP used for all configuration
        const[name=dhcp; value=1]

        # Addresses are assigned statelesslessly but other configuration
        # is obtained via DHCP
        const[name=both; value=2]
    }

    class[RoutingDomain;
          super=gbp/L3BehavioralGroup;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=routing-domain; member=name]
            }
        }

        # Set how IPv6 hosts should be configured (through DHCP or
        # statelessly)
        member[ipv6Autoconfig; type=gbp/Autoconfig]
    }

    class[BaseSubnet;
          super=gbp/BehavioralGroup;
          abstract]
    {
        # The network address
        member[address; type=address/IP]

        # prefix length for the subnet
        member[prefixLen; type=scalar/UInt8]
    }

    class[Subnet;
          super=gbp/BaseSubnet;
          concrete]
    {
        # the IP address to use for a virtual gateway router for the
        # subnet, if desired.  Can be either IPv4 or IPv6.
        member[virtualRouterIp; type=address/IP]

        # Valid lifetime reported in ipv6 router advertisement
        member[ipv6AdvValidLifetime; type=scalar/UInt32]

        # Set to nonzero to allow this prefix to be used for IPv6
        # stateless autoconfiguration
        member[ipv6AdvAutonomousFlag; type=scalar/UInt8]

        # Preferred lifetime reported in ipv6 router advertisement
        member[ipv6AdvPreferredLifetime; type=scalar/UInt32]

        contained
        {
            parent[class=gbp/Subnets]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[Subnets;
          super=gbp/L3BehavioralGroup;
          concrete]
    {
        dependency[network;
                   cardinality=single;
                   ]
        {
            to[class=gbp/BridgeDomain;
               cardinality=many;
               ]

            to[class=gbp/FloodDomain;
               cardinality=many;
               ]

            to[class=gbp/RoutingDomain;
               cardinality=many;
               ]
        }
        contained
        {
            parent[class=gbp/RoutingDomain]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }
}
