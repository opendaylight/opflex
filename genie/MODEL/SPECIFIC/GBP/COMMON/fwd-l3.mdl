module[gbp]
{
    class[L3BehavioralGroup;
          super=gbp/ForwardingBehavioralGroup;
          abstract]

    type[Autoconfig; super=scalar/Enum8]
    {
        # Stateless autoconfiguration
        const[name=stateless; value=0]

        # DHCP used for all configuration
        const[name=dhcp; value=1]

        # Addresses are assigned statelesslessly but other configuration
        # is obtained via DHCP
        const[name=both; value=2]
    }

    type[L3IfType; super=scalar/Enum8]
    {
        const[name=unspec; value=0]
        const[name=subIntf; value=1]
        const[name=l3Port; value=2]
        const[name=extSvi; value=3]
    }

    class[RoutingDomain;
          super=gbp/L3BehavioralGroup;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=routing-domain; member=name]
            }
        }

        # References to subnets that are internal to this routing domain.
        dependency[intSubnets;
                   cardinality=many;
                   ]
        {
            to[class=gbp/Subnets;
               cardinality=many;
               ]
        }

        # Set how IPv6 hosts should be configured (through DHCP or
        # statelessly)
        member[ipv6Autoconfig; type=gbp/Autoconfig]

        member[globalName; type=ascii/String]
    }

    class[BaseSubnet;
          super=gbp/BehavioralGroup;
          abstract]
    {
        # The network address
        member[address; type=address/IP]

        # prefix length for the subnet
        member[prefixLen; type=scalar/UInt8]
    }

    class[BaseNextHop;
          super=gbp/BehavioralGroup;
          abstract]
    {
        # Nexthop address
        member[ip; type=address/IP]
        member[mac; type=address/MAC]
    }

    class[StaticNextHop;
          super=gbp/BaseNextHop;
          concrete]
    {
        contained
        {
            parent[class=gbp/StaticRoute]
        }
        named
        {
            parent[class=*;]
            {
                component[member=ip]
            }
        }
    }

    class[RemoteNextHop;
          super=gbp/BaseNextHop;
          concrete]
    {
        contained
        {
            parent[class=gbp/RemoteRoute]
        }
        named
        {
            parent[class=*;]
            {
                component[member=ip]
            }
        }
    }

    class[BaseRoute;
          super=gbp/BehavioralGroup;
          abstract]
    {
        # The network address
        member[address; type=address/IP]

        # prefix length for the subnet
        member[prefixLen; type=scalar/UInt8]
    }

    class[StaticRoute;
          super=gbp/BaseRoute;
          concrete]
    {
        dependency[vrf;
                   cardinality=single;
                   ]
        {
            to[class=gbp/RoutingDomain;
               cardinality=many;
               ]
        }
        contained
        {
            parent[class=gbp/ExternalNode]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[Subnet;
          super=gbp/BaseSubnet;
          concrete]
    {
        # the IP address to use for a virtual gateway router for the
        # subnet, if desired.  Can be either IPv4 or IPv6.
        member[virtualRouterIp; type=address/IP]

        member[macAddress; type=address/MAC]

        # Valid lifetime reported in ipv6 router advertisement
        member[ipv6AdvValidLifetime; type=scalar/UInt32]

        # Set to nonzero to allow this prefix to be used for IPv6
        # stateless autoconfiguration
        member[ipv6AdvAutonomousFlag; type=scalar/UInt8]

        # Preferred lifetime reported in ipv6 router advertisement
        member[ipv6AdvPreferredLifetime; type=scalar/UInt32]

        contained
        {
            parent[class=gbp/Subnets]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[Subnets;
          super=gbp/BehavioralGroup;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[ExternalL3BridgeDomain;
          super=gbp/L3BehavioralGroup;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=extl3bd;
                          member=name]
            }
        }
        dependency[vrf;
                   cardinality=single;
                   ]
        {
            to[class=gbp/RoutingDomain;
                cardinality=many;
              ]
        }
    }

    class[BgpPeerProfile;
          super=gbp/BaseSubnet;
          concrete]
    {
        member[asn; type=scalar/UInt32]
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[ExternalInterface;
          super=gbp/BehavioralGroup;
          concrete]
    {
        # Path uuid
        member[uuid; type=reference/UUID]

        # The network address
        member[address; type=address/IP]

        # prefix length for the subnet
        member[prefixLen; type=scalar/UInt8]

        # mac address
        member[mac; type=address/MAC]

        # interfaceType
        member[ifInstT; type=gbp/L3IfType]

        # accessEncap
        member[encap; type=gbpe/EncapId]

        contained
        {
            parent[class=policy/Space]
        }

        dependency[extl3bd;
                   cardinality=single;
                   ]
        {
            to[class=gbp/ExternalL3BridgeDomain;
               cardinality=many;
              ]
        }

        dependency[l3out;
                   cardinality=single;
                   ]
        {
            to[class=gbp/L3ExternalDomain;
               cardinality=many;
              ]
        }

        dependency[bgppeerpfx;
                   cardinality=many;
                   ]
        {
            to[class=gbp/BgpPeerProfile;
               cardinality=many;
              ]
        }

        named
        {
            parent[class=*;]
            {
                component[prefix=ext-path;member=uuid]
            }
        }
    }

    class[ExternalNode;
          super=gbp/BehavioralGroup;
          concrete]
    {
        # Path uuid
        member[uuid; type=reference/UUID]

        # rtrId
        member[rtrId; type=address/IP]

        contained
        {
            parent[class=policy/Space]
        }

        named
        {
            parent[class=*;]
            {
                component[prefix=ext-node;member=uuid]
            }
        }
    }

    class[RemoteRoute;
          super=gbp/BaseRoute;
          concrete]
    {
        contained
        {
            parent[class=gbp/RoutingDomain]
        }

        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }

    }

}
