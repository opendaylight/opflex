module[gbp]
{
    type[HashingAlgorithm; super=scalar/Enum8]
    {
        const[name=srcIp; value=1]

        const[name=dstIp; value=2]

        const[name=symmetric; value=3]
    }

    class[Action;
          super=gbp/AccessBehavioralGroup;
          abstract]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=action;
                          member=name]
            }
        }

        member[order; type=scalar/UInt32]
    }

    class[AllowDenyAction;
          super=gbp/Action;
          concrete]
    {
        # Set to nonzero to allow, or zero to deny
        member[allow; type=scalar/UInt8]
    }

    class[LogAction;
          super=gbp/Action;
          concrete]
    {
        # Set to nonzero to log, or zero to skip logging
        member[log; type=scalar/UInt8]
    }

    class[RedirectDest;
          super=gbp/BaseNextHop;
          concrete]
    {
        dependency[domain;
                   cardinality=many;
                   ]
        {
            to[class=gbp/ForwardingBehavioralGroup;
               cardinality=many;
               ]
        }
        contained
        {
            parent[class=gbp/RedirectDestGroup]
        }
        named
        {
            parent[class=*;]
            {
                component[member=name]
            }
        }
    }

    class[RedirectDestGroup;
          super=gbp/AccessBehavioralGroup;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=rdestgrp;
                          member=name]
            }
        }
        member[hashAlgo; type=gbp/HashingAlgorithm]

        # Set to non-zero to be resilient, 0 otherwise
        member[resilientHashEnabled; type=scalar/UInt8]
    }

    class[RedirectAction;
          super=gbp/Action;
          concrete]
    {
        dependency[destGrp;
                   cardinality=single;
                   ]
        {
            to[class=gbp/RedirectDestGroup;
                cardinality=single;
              ]
        }

    }
}
