module[gbp]
{
    # Policies for contract enforcement within an endpoint group
    type[IntraGroupPolicy; super=scalar/Enum8]
    {
        # Traffic between two endpoints in the group is always allowed
        const[name=allow; value=0]

        # Traffic between two endpoints in the group is allowed only
        # when a contract exists to allow it explicitly
        const[name=require-contract; value=1]

        # Traffic between two endpoints in the group is always denied,
        # even when a contract exists
        const[name=deny; value=2]
    }

    class[EpGroup;
          super=gbp/BehavioralGroup;
          concrete;
          ]
    {
        dependency[network;
                   cardinality=single;
                   ]
        {
            to[class=gbp/ForwardingBehavioralGroup;
                cardinality=many;
                ]
        }

        dependency[provContract;
                   cardinality=many;
                   ]
        {
            to[class=gbp/Contract;
                cardinality=many;
                ]
        }
        dependency[consContract;
                   cardinality=many;
                   ]
        {
            to[class=gbp/Contract;
                cardinality=many;
                ]
        }
        dependency[intraContract;
                   cardinality=many;
                   ]
        {
            to[class=gbp/Contract;
                cardinality=many;
                ]
        }

        dependency[subnets;
                   cardinality=single;]
        {
            to[class=gbp/Subnets;
               cardinality=many;
               ]
        }

        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=ep-group;
                          member=name]
            }
        }

        member[intraGroupPolicy; type=gbp/IntraGroupPolicy]
    }
}
