module[gbpe]
{
    type[ClassId; super=scalar/UInt32]
    type[EncapType; super=scalar/Enum8]
    {
        const[name=unknown; value=0]
        const[name=vlan; value=1]
        const[name=vxlan; value=2]
    }
    type[EncapId; super=scalar/UInt32]

    # represents a set of extensions that specify specific identifiers
    # used by the data plane of the wire
    class[InstContext;
          super=policy/Definition;
          concrete]
    {
        member[classid; type=gbpe/ClassId]
        member[encapId; type=gbpe/EncapId]
        member[multicastGroupIP; type=address/IP]
        contained
        {
            parent[class=gbp/EpGroup]
            parent[class=gbp/BridgeDomain]
            parent[class=gbp/RoutingDomain]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=ext-context]
            }
        }
    }

    # Contains additional context for a flood domain
    class[FloodContext;
          super=policy/Definition;
          concrete]
    {
        # The multicast group IP address used for flooding the traffic
        # through the fabric within the flood domain.
        member[multicastGroupIP; type=address/IP]

        contained
        {
            parent[class=gbp/FloodDomain]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=ext-flood-context]
            }
        }
    }

    class[L24Classifier;
          super=gbp/Classifier;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }

        # ARP opcode
        member[arpOpc; type=arp/Opcode]

        # ethertype
        member[etherT; type=l2/EtherType]

        # IP protocol field
        member[prot; type=l3/IpProt]

        # Source port range [from-to]
        member[sFromPort; type=l4/Port]
        member[sToPort; type=l4/Port]

        # Destination port range [from-to]
        member[dFromPort; type=l4/Port]
        member[dToPort; type=l4/Port]

        member[tcpFlags; type=l4/TcpFlags]
    }

    # A set of counters for a network endpoint
    class[EpCounter;
          super=observer/UuidObservable;
          concrete;
          ]
    {
        contained
        {
            parent[class=observer/EpStatUniverse]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
            }
        }
        # number of packets received
        member[rxPackets; type=scalar/UInt64]

        # number of packets sent
        member[txPackets; type=scalar/UInt64]

        # the number of received packets dropped
        member[rxDrop; type=scalar/UInt64]

        # the number of sent packets dropped
        member[txDrop; type=scalar/UInt64]

        # the number of received multicast packets
        member[rxMulticast; type=scalar/UInt64]

        # the number of sent multicast packets
        member[txMulticast; type=scalar/UInt64]

        # the number of received broadcast packets
        member[rxBroadcast; type=scalar/UInt64]

        # the number of sent broadcast packets
        member[txBroadcast; type=scalar/UInt64]

        # the number of received unicast packets
        member[rxUnicast; type=scalar/UInt64]

        # the number of sent unicast packets
        member[txUnicast; type=scalar/UInt64]

        # the number of bytes received
        member[rxBytes; type=scalar/UInt64]

        # the number of bytes sent
        member[txBytes; type=scalar/UInt64]
    }

    # universe to hold tunnel endpoints
    class[TunnelEpUniverse;
          super=epr/Universe;
          concrete;
          ]
    {
        named
        {
            parent[class=*;]
            {
                component[prefix=tunnel;]
            }
        }
    }

    # Tunnel endpoints are special endpoints that represent
    # a hypervisor host tunnel terminator
    class[TunnelEp;
          super=epr/ReportedEp;
          concrete;
          ]
    {
        contained
        {
            parent[class=gbpe/TunnelEpUniverse]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
            }
        }

        # A unique identifer for the endpoint.  Could be related to a
        # UUID for an interface, virtual machine, etc.
        member[uuid; type=reference/UUID]

        # The IP address for the tunnel terminator
        member[terminatorIp; type=address/IP]

        # mac address of the TEP
        member[mac; type=address/MAC]

        # encap used by the TEp
        member[encapType; type=gbpe/EncapType]
        member[encapId; type=gbpe/EncapId]
    }

    # A pool of IP addresses to be used as source addresses for source
    # NAT when mapping an endpoint into another routing domain using
    # an L3ExternalNetwork definition.  This pool is specific to a
    # particular agent/tunnelep/nat EPG.  There can be multiple pools
    # for a given combination in which case all IPs from all pools can
    # be used.
    class[SNATIPPool;
          super=gbp/BaseSubnet;
          concrete]
    {
        contained
        {
            parent[class=platform/Config]
        }
        named
        {
            parent[class=*]
            {
                component[prefix=snat-pool; member=name]
            }
        }

        # The UUID for the tunnel endpoint associated with this
        # pool. In an encap mode without tunnel endpoints this should
        # be unset.
        member[tunnelEpUuid; type=reference/UUID]

        # The endpoint group associated with this pool.  Mapped
        # addresses will be registered as endpoints in this endpoint
        # group.
        member[natEpGroup; type=reference/URI]
    }

    # An attestation is a child object of an endpoint declaration that
    # can be used by the endpoint registry to confirm the validity of
    # a reported endpoint.
    class[Attestation;
          super=epr/EndPoint;
          concrete]
    {
        contained
        {
            parent[class=epr/ReportedEp]
        }
        named
        {
            parent[class=*]
            {
                component[member=name]
            }
        }

        # Name for the attestation unique to the parent object
        member[name; type=naming/Name]

        # value used by the endpoint registry to confirm the
        # legitimacy of the endpoint
        member[validator; type=ascii/String]

        # Message authenticity code for the validator string
        member[validatorMac; type=ascii/String]
    }


    class[L24ClassifierCounter;
          super=observer/Observable;
          concrete;
          ]
    {
        contained
        {
            parent[class=observer/PolicyStatUniverse]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
                component[member=genId]
                component[member=srcEpg]
                component[member=dstEpg]
                component[member=classifier]
            }
        }

        # A unique identifer for the agent incarnation
        member[uuid; type=reference/UUID]

        # A unique identifer for the counter incarnation
        member[genId; type=scalar/UInt64]

        # A unique identifer for the source endpointGroup.
        member[srcEpg; type=reference/URI]

        # A unique identifer for the destination endpointGroup.
        member[dstEpg; type=reference/URI]

        # A unique identifer for the source endpointGroup.
        member[classifier; type=reference/URI]

        # number of packets sent from src to dst matching classifier
        member[packets; type=scalar/UInt64]

        # number of bytes sent from src to dst matching classifier
        member[bytes; type=scalar/UInt64]

    }
    class[HPPClassifierCounter;
          super=observer/Observable;
          concrete;
          ]
    {
        contained
        {
            parent[class=observer/PolicyStatUniverse]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
                component[member=genId]
                component[member=classifier]
            }
        }

        # A unique identifer for the agent incarnation
        member[uuid; type=reference/UUID]

        # A unique identifer for the counter incarnation
        member[genId; type=scalar/UInt64]
       
      # A unique identifer for the classifier.
        member[classifier; type=reference/URI]

        # number of packets sent from src to dst matching classifier (RX packets )
        member[rxpackets; type=scalar/UInt64]

        # number of bytes sent from src to dst matching classifier (RX bytes) 
        # These counters are collected from SEC_GROUP_OUT_TABLE_ID of open flow table
        member[rxbytes; type=scalar/UInt64]
   
      # number of packets sent from dst to src matching classifier (TX packets)
        member[txpackets; type=scalar/UInt64]

        # number of bytes sent from dst to src matching classifier (TX bytes)
        # These counters are collected from SEC_GROUP_IN_TABLE_ID of open flow table
        member[txbytes; type=scalar/UInt64]
   

    }

    class[RoutingDomainDropCounter;
          super=observer/Observable;
          concrete;
          ]
    {
        contained
        {
            parent[class=observer/PolicyStatUniverse]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
                component[member=genId]
                component[member=routingDomain]
            }
        }

        # A unique identifer for the agent incarnation
        member[uuid; type=reference/UUID]

        # A unique identifer for the counter incarnation
        member[genId; type=scalar/UInt64]

        # A unique identifer for the routingDomain
        member[routingDomain; type=reference/URI]

        # number of packets dropped for the routingDomain
        member[packets; type=scalar/UInt64]

        # number of bytes dropped for the routingDomain
        member[bytes; type=scalar/UInt64]

    }
