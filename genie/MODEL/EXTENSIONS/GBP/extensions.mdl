module[gbpe]
{
    type[ClassId; super=scalar/UInt32]
    type[EncapType; super=scalar/Enum8]
    {
        const[name=vlan; value=1]
        const[name=vxlan; value=2]
    }
    type[EncapValue; super=scalar/UInt32]

    # represents a set of extensions that specify specific identifiers 
    # used by the data plane of the wire
    class[InstContext;
          super=policy/Definition;
          concrete]
    {
        member[classid; type=gbpe/ClassId]
        member[encapType; type=gbpe/EncapType]
        member[encapValue; type=gbpe/EncapValue]
        member[multicastGroupIP; type=address/IP]
        contained
        {
            parent[class=gbp/EpGroup]
            parent[class=gbp/BridgeDomain]
            parent[class=gbp/RoutingDomain]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=ext-context]
            }
        }
    }

    # Contains additional context for a flood domain
    class[FloodContext;
          super=policy/Definition;
          concrete]
    {
        # The multicast group IP address used for flooding the traffic
        # through the fabric within the flood domain.
        member[multicastGroupIP; type=address/IP]

        contained
        {
            parent[class=gbp/FloodDomain]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=ext-flood-context]
            }
        }
    }

    class[L24Classifier;
          super=gbp/Classifier;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }

        # ARP opcode
        member[arpOpc; type=arp/Opcode]

        # ethertype
        member[etherT; type=l2/EtherType]

        # IP protocol field
        member[prot; type=l3/IpProt]

        # Source port range [from-to]
        member[sFromPort; type=l4/Port]
        member[sToPort; type=l4/Port]

        # Destination port range [from-to]
        member[dFromPort; type=l4/Port]
        member[dToPort; type=l4/Port]
    }

    # A set of counters for a network endpoint
    class[EpCounter;
          super=observer/UuidObservable;
          concrete;
          ]
    {
        contained
        {
            parent[class=observer/EpStatUniverse]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
            }
        }
        # number of packets received
        member[rxPackets; type=scalar/UInt64]

        # number of packets sent
        member[txPackets; type=scalar/UInt64]

        # the number of received packets dropped
        member[rxDrop; type=scalar/UInt64]

        # the number of sent packets dropped
        member[txDrop; type=scalar/UInt64]

        # the number of received multicast packets
        member[rxMulticast; type=scalar/UInt64]

        # the number of sent multicast packets
        member[txMulticast; type=scalar/UInt64]

        # the number of received broadcast packets
        member[rxBroadcast; type=scalar/UInt64]

        # the number of sent broadcast packets
        member[txBroadcast; type=scalar/UInt64]

        # the number of received unicast packets
        member[rxUnicast; type=scalar/UInt64]

        # the number of sent unicast packets
        member[txUnicast; type=scalar/UInt64]

        # the number of bytes received
        member[rxBytes; type=scalar/UInt64]

        # the number of bytes sent
        member[txBytes; type=scalar/UInt64]
    }

    # universe to hold tunnel endpoints
    class[TunnelEpUniverse;
          super=epr/Universe;
          concrete;
          ]
    {
        named
        {
            parent[class=*;]
            {
                component[prefix=tunnel;]
            }
        }
    }

    # Tunnel endpoints are special endpoints that represent
    # a hypervisor host tunnel terminator
    class[TunnelEp;
          super=epr/ReportedEp;
          concrete;
          ]
    {
        contained
        {
            parent[class=gbpe/TunnelEpUniverse]
        }
        named
        {
            parent[class=*;]
            {
                component[member=uuid]
            }
        }

        # A unique identifer for the endpoint.  Could be related to a
        # UUID for an interface, virtual machine, etc.
        member[uuid; type=reference/UUID]

        # The IP address for the tunnel terminator
        member[terminatorIp; type=address/IP]

        # mac address of the TEP
        member[mac; type=address/MAC]

        # encap used by the TEp
        member[encapType; type=gbpe/EncapType]
        member[encapValue; type=gbpe/EncapValue]
    }
}
