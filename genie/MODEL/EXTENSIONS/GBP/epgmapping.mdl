module[gbpe]
{
    # Map an endpoint to an endpoint group based on attributes or 
    # network identifiers.  The EPG mapping applies to a particular
    # port group or other context referenced in the name.
    class[EpgMapping;
          super=policy/NamedDefinition;
          concrete]
    {
        contained
        {
            parent[class=policy/Space]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=epg-mapping;
                          member=name]
            }
        }

        # The default group to assign to if none of the other mapping 
        # rules applies
        member[defaultGroup; type=epr/GroupContext]
    }

    # Allow resolving the EpgMapping from a discovered network endpoint
    class[EpgMappingCtx;
	  super=epr/LocalEp;
          concrete]
    {
        contained
        {
            parent[class=epdr/EndPoint]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=epmap-context]
            }
        }
        dependency[epgMapping;
                   cardinality=single;
                   ]
        {
            to[class=gbpe/EpgMapping;
                cardinality=single;
                ]
        }
    }

#    class[EpAttribute;
#          super=policy/NamedDefinition;
#          concrete]
#    {
#        contained
#        {
#            parent[class=gbpe/EpgMapping]
#        }
#        named
#        {
#            parent[class=*;]
#            {
#                component[member=uuid]
#                component[member=name]
#            }
#        }
#
#        # The unique identifier for the endpoint to which this attribute 
#        # applies.
#        member[uuid; type=reference/UUID]
#
#        # The value of the attribute represented as a string
#        member[value; type=ascii/String]
#    }
#
#    class[NetIdMapping;
#          super=policy/NamedDefinition;
#          concrete]
#    {
#        contained
#        {
#            parent[class=gbpe/EpgMapping]
#        }
#        named
#        {
#            parent[class=*;]
#            {
#                component[member=name]
#            }
#        }
#        member[group; type=epr/GroupContext]
#        member[ip; type=address/IP]
#        member[mac; type=address/MAC]
#    }
#
#    class[AttributeMapping;
#          super=policy/NamedDefinition;
#          concrete]
#    {
#        contained
#        {
#            parent[class=gbpe/EpgMapping]
#        }
#        named
#        {
#            parent[class=*;]
#            {
#                component[member=name]
#            }
#        }
#    }
}
