module[monitor]
{
    # Universe containing all monitoring artifacts
    class[Universe;
          concrete;]
    {
        # part of root node
        root
        
        named
        {
            parent[class=*;]
            {
                component[prefix=mon;]
            }
        }
    }
    
    type[ErspanVersion; super=scalar/Enum8]
    {
        const[name=v1; value=1]
        const[name=v2; value=2]
    }


    type[Direction; super=scalar/Enum8]
    {
        const[name=in; value=1]
        const[name=out; value=2]
        const[name=both; value=3]
    }

    class[Grp;
          super=platform/ConfigComponent;
          abstract]

    class[SrcGrp;
          super=monitor/Grp;
          concrete]
    {
        member[state; type=platform/AdminState]
        member[label; type=scalar/UInt32]
        contained
        {
            parent[class=monitor/Universe]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=srcgrp;
                          member=name]
            }
        }
        dependency[ref;
                   cardinality=single;
                  ]
        {
            to[class=monitor/DstGrp;
                cardinality=single;
              ]
        }        
    }

    class[DstGrp;
          super=monitor/Grp;
          concrete]
    {
        contained
        {
            parent[class=monitor/Universe]
        }     
        named
        {
            parent[class=*;]
            {
                component[prefix=dstgrp;
                          member=name]
            }
        }
    }

    class[LocalEp;
          super=platform/ConfigComponent;
          concrete]
    {
        member[nic; type=ascii/Name]
        contained
        {
            parent[class=monitor/Universe]
        }
        dependency[ep;
                   cardinality=single;
                   ]
        {
            to[class=epr/ReportedNetworkEp;
                cardinality=many;
                ]
        }

        named
        {
            parent[class=*;]
            {
                component[prefix=ep;
                          member=name]
            }
        }
    }

    class[Member;
          super=policy/NamedComponent;
          abstract]
    {
        dependency[ref;
                   cardinality=single;
                   ]
        {
            to[class=gbp/EpGroup;
                cardinality=many;
                ]

            to[class=monitor/LocalEp;
                cardinality=many;
                ]
        }
        named
        {
            parent[class=*;]
            {
                component[prefix=mem;
                          member=name]
            }
        }
    }

    class[SrcMember;
          super=monitor/Member;
          concrete]
    {
        member[dir; type=monitor/Direction]
        
        contained
        {
            parent[class=monitor/SrcGrp]
        }

    }

    class[DstMember;
          super=monitor/Member;
          concrete]
    {
        member[dest; type=address/IP]
        member[version; type=monitor/ErspanVersion]

        contained
        {
            parent[class=monitor/DstGrp]
        }
    }
}