diff --git a/agent-ovs/lib/EndpointManager.cpp b/agent-ovs/lib/EndpointManager.cpp
index fd56aab..054407f 100644
--- a/agent-ovs/lib/EndpointManager.cpp
+++ b/agent-ovs/lib/EndpointManager.cpp
@@ -542,6 +542,9 @@ void EndpointManager::updateEndpointRemote(const opflex::modb::URI& uri) {
         }
     }
 
+#ifdef HAVE_PROMETHEUS_SUPPORT
+    prometheusManager.addNUpdateRemoteEpCount(remote_ep_uuid_map.size());
+#endif
     guard.unlock();
     if (uuid)
         notifyRemoteListeners(uuid.get());
diff --git a/agent-ovs/lib/PrometheusManager.cpp b/agent-ovs/lib/PrometheusManager.cpp
index 4dddd1a..4c12a4c 100644
--- a/agent-ovs/lib/PrometheusManager.cpp
+++ b/agent-ovs/lib/PrometheusManager.cpp
@@ -134,6 +134,16 @@ static string ofpeer_family_help[] =
   "number of state reports error repsonses from opflex peer"
 };
 
+static string remote_ep_family_names[] =
+{
+  "opflex_remote_ep_count"
+};
+
+static string remote_ep_family_help[] =
+{
+  "number of remote endpoints under the same uplink port"
+};
+
 static string rddrop_family_names[] =
 {
   "opflex_policy_drop_bytes",
@@ -280,6 +290,12 @@ void PrometheusManager::removeDynamicGauges ()
         removeDynamicGaugeOFPeer();
     }
 
+    // Remove RemoteEp related gauges
+    {
+        const lock_guard<mutex> lock(remote_ep_mutex);
+        removeDynamicGaugeRemoteEp();
+    }
+
     // Remove RDDropCounter related gauges
     {
         const lock_guard<mutex> lock(rddrop_stats_mutex);
@@ -380,6 +396,29 @@ void PrometheusManager::createStaticGaugeFamiliesSGClassifier (void)
     }
 }
 
+// create all RemoteEp specific gauge families during start
+void PrometheusManager::createStaticGaugeFamiliesRemoteEp (void)
+{
+    // add a new gauge family to the registry (families combine values with the
+    // same name, but distinct label dimensions)
+    // Note: There is a unique ptr allocated and referencing the below reference
+    // during Register().
+
+    for (REMOTE_EP_METRICS metric=REMOTE_EP_METRICS_MIN;
+            metric <= REMOTE_EP_METRICS_MAX;
+                metric = REMOTE_EP_METRICS(metric+1)) {
+        auto& gauge_remote_ep_family = BuildGauge()
+                             .Name(remote_ep_family_names[metric])
+                             .Help(remote_ep_family_help[metric])
+                             .Labels({})
+                             .Register(*registry_ptr);
+        gauge_remote_ep_family_ptr[metric] = &gauge_remote_ep_family;
+
+        // metrics per family will be created later
+        remote_ep_gauge_map[metric] = nullptr;
+    }
+}
+
 // create all RDDrop specific gauge families during start
 void PrometheusManager::createStaticGaugeFamiliesRDDrop (void)
 {
@@ -504,6 +543,11 @@ void PrometheusManager::createStaticGaugeFamilies (void)
         createStaticGaugeFamiliesOFPeer();
     }
 
+    {
+        const lock_guard<mutex> lock(remote_ep_mutex);
+        createStaticGaugeFamiliesRemoteEp();
+    }
+
     {
         const lock_guard<mutex> lock(rddrop_stats_mutex);
         createStaticGaugeFamiliesRDDrop();
@@ -884,6 +928,20 @@ string PrometheusManager::stringizeClassifier (const string& tenant,
     return compressed;
 }
 
+// Create RemoteEp gauge given metric type
+void PrometheusManager::createDynamicGaugeRemoteEp (REMOTE_EP_METRICS metric)
+{
+    // Retrieve the Gauge if its already created
+    if (getDynamicGaugeRemoteEp(metric))
+        return;
+
+    LOG(DEBUG) << "creating remote ep dyn gauge family"
+               << " metric: " << metric;
+
+    auto& gauge = gauge_remote_ep_family_ptr[metric]->Add({});
+    remote_ep_gauge_map[metric] = &gauge;
+}
+
 // Create RDDropCounter gauge given metric type, rdURI
 void PrometheusManager::createDynamicGaugeRDDrop (RDDROP_METRICS metric,
                                                   const string& rdURI)
@@ -1155,6 +1213,12 @@ Gauge * PrometheusManager::getDynamicGaugeSGClassifier (SGCLASSIFIER_METRICS met
     return pgauge;
 }
 
+// Get RemoteEp gauge given the metric
+Gauge * PrometheusManager::getDynamicGaugeRemoteEp (REMOTE_EP_METRICS metric)
+{
+    return remote_ep_gauge_map[metric];
+}
+
 // Get RDDropCounter gauge given the metric, rdURI
 Gauge * PrometheusManager::getDynamicGaugeRDDrop (RDDROP_METRICS metric,
                                                   const string& rdURI)
@@ -1295,6 +1359,29 @@ void PrometheusManager::removeDynamicGaugeSGClassifier ()
     }
 }
 
+// Remove dynamic RemoteEp gauge given a metic type
+bool PrometheusManager::removeDynamicGaugeRemoteEp (REMOTE_EP_METRICS metric)
+{
+    Gauge *pgauge = getDynamicGaugeRemoteEp(metric);
+    if (pgauge) {
+        gauge_remote_ep_family_ptr[metric]->Remove(pgauge);
+    } else {
+        LOG(DEBUG) << "remove dynamic gauge RemoteEp not found";
+        return false;
+    }
+    return true;
+}
+
+// Remove dynamic RemoteEp gauges for all metrics
+void PrometheusManager::removeDynamicGaugeRemoteEp ()
+{
+    for (REMOTE_EP_METRICS metric=REMOTE_EP_METRICS_MIN;
+            metric <= REMOTE_EP_METRICS_MAX;
+                metric = REMOTE_EP_METRICS(metric+1)) {
+        removeDynamicGaugeRemoteEp(metric);
+    }
+}
+
 // Remove dynamic RDDropCounter gauge given a metic type and rdURI
 bool PrometheusManager::removeDynamicGaugeRDDrop (RDDROP_METRICS metric,
                                                   const string& rdURI)
@@ -1524,6 +1611,16 @@ void PrometheusManager::removeStaticGaugeFamiliesSGClassifier ()
     }
 }
 
+// Remove all statically allocated RemoteEp gauge families
+void PrometheusManager::removeStaticGaugeFamiliesRemoteEp ()
+{
+    for (REMOTE_EP_METRICS metric=REMOTE_EP_METRICS_MIN;
+            metric <= REMOTE_EP_METRICS_MAX;
+                metric = REMOTE_EP_METRICS(metric+1)) {
+        gauge_remote_ep_family_ptr[metric] = nullptr;
+    }
+}
+
 // Remove all statically allocated RDDrop gauge families
 void PrometheusManager::removeStaticGaugeFamiliesRDDrop ()
 {
@@ -1586,6 +1683,12 @@ void PrometheusManager::removeStaticGaugeFamilies()
         removeStaticGaugeFamiliesOFPeer();
     }
 
+    // RemoteEp specific
+    {
+        const lock_guard<mutex> lock(remote_ep_mutex);
+        removeStaticGaugeFamiliesRemoteEp();
+    }
+
     // RDDropCounter specific
     {
         const lock_guard<mutex> lock(rddrop_stats_mutex);
@@ -1842,6 +1945,22 @@ void PrometheusManager::addNUpdateSGClassifierCounter (const string& classifier)
     }
 }
 
+/* Function called from EndpointManager to create/update RemoteEp count */
+void PrometheusManager::addNUpdateRemoteEpCount (size_t count)
+{
+    const lock_guard<mutex> lock(remote_ep_mutex);
+
+    for (REMOTE_EP_METRICS metric=REMOTE_EP_METRICS_MIN;
+            metric <= REMOTE_EP_METRICS_MAX;
+                metric = REMOTE_EP_METRICS(metric+1)) {
+        // create the metric if its not present
+        createDynamicGaugeRemoteEp(metric);
+        Gauge *pgauge = getDynamicGaugeRemoteEp(metric);
+        if (pgauge)
+            pgauge->Set(static_cast<double>(count));
+    }
+}
+
 /* Function called from ContractStatsManager to update RDDropCounter
  * This will be called from IntFlowManager to create metrics. */
 void PrometheusManager::addNUpdateRDDropCounter (const string& rdURI,
@@ -2089,11 +2208,26 @@ void PrometheusManager::addNUpdateEpCounter (const string& uuid,
     }
 }
 
+void PrometheusManager::dumpPodSvcState ()
+{
+    LOG(DEBUG) << "######### PODSVC STATE: #########";
+    for (PODSVC_METRICS metric=PODSVC_METRICS_MIN;
+            metric <= PODSVC_METRICS_MAX;
+                metric = PODSVC_METRICS(metric+1)) {
+        for (auto &p : podsvc_gauge_map[metric]) {
+            LOG(DEBUG) << "   metric: " << podsvc_family_names[metric]
+                       << "   uuid: " << p.first
+                       << "   gauge_ptr: " << p.second.get().second;
+        }
+    }
+}
+
 // Function called from IntFlowManager to remove PodSvcCounter
 void PrometheusManager::removePodSvcCounter (bool isEpToSvc,
                                              const string& uuid)
 {
     const lock_guard<mutex> lock(podsvc_counter_mutex);
+
     LOG(DEBUG) << "remove podsvc counter"
                << " isEpToSvc: " << isEpToSvc
                << " uuid: " << uuid;
diff --git a/agent-ovs/lib/include/opflexagent/PrometheusManager.h b/agent-ovs/lib/include/opflexagent/PrometheusManager.h
index fe6da5e..8ab0bc7 100644
--- a/agent-ovs/lib/include/opflexagent/PrometheusManager.h
+++ b/agent-ovs/lib/include/opflexagent/PrometheusManager.h
@@ -136,6 +136,16 @@ public:
     void addNUpdateOFPeerStats(void);
 
 
+    /* RemoteEp related APIs */
+    /**
+     * Create RemoteEp metric family if its not present.
+     * Update RemoteEp metric family if its already present
+     *
+     * @param count       total number of remote EPs under same uplink
+     */
+    void addNUpdateRemoteEpCount(size_t count);
+
+
     /* RDDropCounter related APIs */
     /**
      * Create RDDropCounter metric family if its not present.
@@ -407,6 +417,8 @@ private:
     void removeDynamicGaugePodSvc(PODSVC_METRICS metric);
     // func to remove all gauges of every PodSvcCounter
     void removeDynamicGaugePodSvc(void);
+    // func to dump PodSvcCounter metric state
+    void dumpPodSvcState(void);
 
     /**
      * cache the label map and Gauge ptr for every (endpoint + service) uuid
@@ -482,6 +494,45 @@ private:
     /* End of OFPeerStats related apis and state */
 
 
+    /* Start of RemoteEp related apis and state */
+    // Lock to safe guard RemoteEp related state
+    mutex remote_ep_mutex;
+
+    enum REMOTE_EP_METRICS {
+        REMOTE_EP_METRICS_MIN,
+        REMOTE_EP_COUNT = REMOTE_EP_METRICS_MIN,
+        REMOTE_EP_METRICS_MAX = REMOTE_EP_COUNT
+    };
+
+    // Static Metric families and metrics
+    // metric families to track all RemoteEp metrics
+    Family<Gauge>      *gauge_remote_ep_family_ptr[REMOTE_EP_METRICS_MAX+1];
+
+    // create any remote ep stats gauge metric families during start
+    void createStaticGaugeFamiliesRemoteEp(void);
+    // remove any remote ep stats gauge metric families during stop
+    void removeStaticGaugeFamiliesRemoteEp(void);
+
+    // Dynamic Metric families and metrics
+    // CRUD for every Remote ep metric
+    // func to create gauge for remote ep given metric type
+    void createDynamicGaugeRemoteEp(REMOTE_EP_METRICS metric);
+
+    // func to get label map and Gauge for RemoteEp given metric type
+    Gauge * getDynamicGaugeRemoteEp(REMOTE_EP_METRICS metric);
+
+    // func to remove gauge for RemoteEp given metric type
+    bool removeDynamicGaugeRemoteEp(REMOTE_EP_METRICS metric);
+    // func to remove all gauges of every RemoteEp
+    void removeDynamicGaugeRemoteEp(void);
+
+    /**
+     * cache Gauge ptr for every RemoteEp metric
+     */
+    Gauge* remote_ep_gauge_map[REMOTE_EP_METRICS_MAX+1];
+    /* End of RemoteEp related apis and state */
+
+
     /* Start of RDDropCounter related apis and state */
     // Lock to safe guard RDDropCounter related state
     mutex rddrop_stats_mutex;
@@ -544,7 +595,7 @@ private:
     };
 
     // Static Metric families and metrics
-    // metric families to track all PodSvcCounter metrics
+    // metric families to track all TableDrop metrics
     Family<Gauge>      *gauge_table_drop_family_ptr[TABLE_DROP_METRICS_MAX+1];
 
     // create table drop gauge metric families during start
