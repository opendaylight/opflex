/* -*- C++ -*-; c-basic-offset: 4; indent-tabs-mode: nil */
/*!
 * @file ModelMetadata.h
 * @brief Interface definition file for ModelMetadata
 */
/*
 * Copyright (c) 2014 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

#ifndef MODB_MODELMETADATA_H
#define MODB_MODELMETADATA_H

#include <string>
#include <vector>

#include "opflex/modb/ClassInfo.h"
#include "opflex/modb/EnumInfo.h"

namespace opflex {
namespace modb {

/**
 * \addtogroup cpp
 * @{
 */

/**
 * @defgroup metadata Model Metadata
 *
 * These types are used to define the basic parameters of the model.
 * An actual instance of the metadata would be defined in the
 * generated model code.
 *
 * \addtogroup metadata
 * @{
 */

/**
 * @brief Model metadata encapsulated all the metadata for a given model. 
 * 
 * This metadata is generated by the code generation framework and is
 * required when the framework is initialized.
 */
class ModelMetadata {
public:
    /**
     * Construct a model metadata object for the given class ID
     * @param model_name the name of the model
     * @param classes a vector containing the classes to be used with
     * the model
     * @param enums a vector containing the enums to be used with
     * the model
     */
    ModelMetadata(const std::string& model_name,
                  const std::vector<ClassInfo>& classes,
                  const std::vector<EnumInfo>& enums);

    /**
     * Destroy the class index
     */
    ~ModelMetadata();

    /**
     * Get the name for this model
     * @return the string name
     */
    const std::string& getName() const { return model_name; }

    /**
     * Get the classes that exist in this model
     * @return a vector of ClassInfo objects
     */
    const std::vector<ClassInfo>& getClasses() const { return classes; }

    /**
    * Get the enums that exist in this model
    * @return a vector of EnumInfo objects
    */
    const std::vector<EnumInfo>& getEnums() const { return enums; }

private:
    /**
     * The name for this model
     */
    std::string model_name;

    /**
     * The version for this model
     */
    std::string model_version;

    /**
     * The properties for this class
     */
    std::vector<ClassInfo> classes;

    /*
     * The enums defined in this model
     */
    std::vector<EnumInfo> enums;
};

/* @} metadata */
/* @} cpp */

} /* namespace modb */
} /* namespace opflex */

#endif /* MODB_MODELMETADATA_H */
