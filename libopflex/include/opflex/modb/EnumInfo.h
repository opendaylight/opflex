/* -*- C++ -*-; c-basic-offset: 4; indent-tabs-mode: nil */
/*!
 * @file EnumInfo.h
 * @brief Interface definition file for EnumInfo
 */
/*
 * Copyright (c) 2014 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

#ifndef MODB_ENUMINFO_H
#define MODB_ENUMINFO_H

#include <string>
#include <vector>

#include "opflex/modb/ConstInfo.h"
#include "opflex/ofcore/OFTypes.h"

namespace opflex {
namespace modb {

/**
 * \addtogroup cpp
 * @{
 * \addtogroup metadata
 * @{
 */

/**
 * @brief Enum info defines the set of possible values for an enum
 * as well as the properties current defined by it.
 *
 * This metadata is generated by the code generation framework and is
 * required when the framework is initialized.
 */
class EnumInfo {
public:

    /**
     * Default constructor
     */
    EnumInfo() {}

    /**
     * Construct an enum info with the given name and consts.
     */
    EnumInfo(const std::string &name_,
             const std::vector<ConstInfo>& consts_);

    /**
     * Destructor
     */
    ~EnumInfo();

    /**
     * Get the name of the enum
     * @return the enum name
     */
    const std::string& getName() const { return name; }

    /**
     * Get the vector of possible const values for the enum
     * @return the vector of possible const values
     */
    const std::vector<ConstInfo>& getConsts() const { return consts; }

    /**
     * Get the constant value by the enum name
     *
     * @return The integer enum value
     * @throws std::out_of_range if the name does not exist
     */
    const uint64_t getIdByName(const std::string& name) const;

    /**
     * Get the enum constant name by the enum value
     *
     * @return the string name
     * @throws std::out_of_range if the ID does not exist
     */
    const std::string& getNameById(uint64_t id) const;

private:
    /**
     * The name for this enum
     */
    std::string name;

    /**
     * Possible const values for the enum
     */
    std::vector<ConstInfo> consts;

    typedef OF_UNORDERED_MAP<std::string, uint64_t> const_name_map_t;
    typedef OF_UNORDERED_MAP<uint64_t, std::string> const_value_map_t;

    const_name_map_t const_name_map;
    const_value_map_t const_value_map;
};

/* @} metadata */
/* @} cpp */

} /* namespace modb */
} /* namespace opflex */

#endif
